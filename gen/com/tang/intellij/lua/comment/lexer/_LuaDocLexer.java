// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: doc.flex

package com.tang.intellij.lua.comment.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.tang.intellij.lua.comment.psi.LuaDocTypes;
import java.util.Stack;

public class _LuaDocLexer implements FlexLexer, LuaDocTypes {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int xTAG = 2;
  public static final int xTAG_WITH_ID = 4;
  public static final int xTAG_NAME = 6;
  public static final int xCOMMENT_STRING = 8;
  public static final int xPARAM = 10;
  public static final int xTYPE_REF = 12;
  public static final int xCLASS = 14;
  public static final int xCLASS_GENERIC = 16;
  public static final int xCLASS_EXTEND = 18;
  public static final int xFIELD = 20;
  public static final int xFIELD_ID = 22;
  public static final int xGENERIC = 24;
  public static final int xALIAS = 26;
  public static final int xSUPPRESS = 28;
  public static final int xPARTIAL = 30;
  public static final int xDOUBLE_QUOTED_STRING = 32;
  public static final int xSINGLE_QUOTED_STRING = 34;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 13, 13, 
    15, 15, 16, 16
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00"+
    "\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900"+
    "\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00\1\u4f00\1\u5000"+
    "\1\u5100\1\u5200\3\u0100\1\u5300\1\u5400\1\u5500\12\u1f00\4\u0100"+
    "\1\u5600\17\u1f00\2\u0100\1\u5700\41\u1f00\2\u0100\1\u5800\1\u5900"+
    "\2\u1f00\1\u5a00\1\u5b00\27\u0100\1\u5c00\4\u0100\1\u5d00\1\u5e00"+
    "\42\u1f00\1\u0100\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00\1\u6200"+
    "\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00\1\u6800"+
    "\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u1f00\1\u6f00\14\u1f00\1\u7000\4\u1f00\246\u0100\1\u7100"+
    "\20\u0100\1\u7200\1\u7300\25\u0100\1\u7400\34\u0100\1\u7500\14\u1f00"+
    "\2\u0100\1\u7600\5\u1f00\23\u0100\1\u7700\u0aec\u1f00\1\u7800\1\u7900"+
    "\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\6\1\5\1\7\1\10\1\11\2\5\1\12\1\13"+
    "\1\14\2\5\1\15\1\16\1\17\1\5\12\0\1\20"+
    "\1\5\1\21\1\5\1\22\1\5\1\23\32\11\1\24"+
    "\1\25\1\26\1\5\1\11\1\5\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\11\1\36\2\11\1\37"+
    "\1\40\1\41\1\42\1\43\1\11\1\44\1\45\1\46"+
    "\1\47\1\50\2\11\1\51\1\11\1\52\1\53\1\54"+
    "\1\5\6\0\1\55\32\0\1\56\1\5\4\11\4\5"+
    "\1\11\2\5\1\0\7\5\1\11\4\5\1\11\5\5"+
    "\27\11\1\5\37\11\1\5\u01ca\11\4\5\14\11\16\5"+
    "\5\11\7\5\1\11\1\5\1\11\21\5\160\0\5\11"+
    "\1\5\2\11\2\5\4\11\1\5\1\11\6\5\1\11"+
    "\1\5\3\11\1\5\1\11\1\5\24\11\1\5\123\11"+
    "\1\5\213\11\1\5\5\0\2\5\246\11\1\5\46\11"+
    "\2\5\1\11\6\5\51\11\6\5\1\11\1\5\55\0"+
    "\1\5\1\0\1\5\2\0\1\5\2\0\1\5\1\0"+
    "\10\5\33\11\4\5\4\11\15\5\6\0\5\5\1\11"+
    "\4\5\13\0\1\5\1\0\3\5\53\11\37\0\4\5"+
    "\2\11\1\0\143\11\1\5\1\11\10\0\1\5\6\0"+
    "\2\11\2\0\1\5\4\0\2\11\12\0\3\11\2\5"+
    "\1\11\17\5\1\0\1\11\1\0\36\11\33\0\2\5"+
    "\131\11\13\0\1\11\16\5\12\0\41\11\11\0\2\11"+
    "\4\5\1\11\2\5\1\0\30\11\4\0\1\11\11\0"+
    "\1\11\3\0\1\11\5\0\22\5\31\11\3\0\4\5"+
    "\13\11\65\5\25\11\1\5\22\11\13\5\61\0\66\11"+
    "\3\0\1\11\22\0\1\11\7\0\12\11\2\0\2\5"+
    "\12\0\1\5\20\11\3\0\1\5\10\11\2\5\2\11"+
    "\2\5\26\11\1\5\7\11\1\5\1\11\3\5\4\11"+
    "\2\5\1\0\1\11\7\0\2\5\2\0\2\5\3\0"+
    "\1\11\10\5\1\0\4\5\2\11\1\5\3\11\2\0"+
    "\2\5\12\0\4\11\7\5\2\11\1\5\1\0\2\5"+
    "\3\0\1\5\6\11\4\5\2\11\2\5\26\11\1\5"+
    "\7\11\1\5\2\11\1\5\2\11\1\5\2\11\2\5"+
    "\1\0\1\5\5\0\4\5\2\0\2\5\3\0\3\5"+
    "\1\0\7\5\4\11\1\5\1\11\7\5\14\0\3\11"+
    "\1\0\13\5\3\0\1\5\11\11\1\5\3\11\1\5"+
    "\26\11\1\5\7\11\1\5\2\11\1\5\5\11\2\5"+
    "\1\0\1\11\10\0\1\5\3\0\1\5\3\0\2\5"+
    "\1\11\17\5\2\11\2\0\2\5\12\0\1\5\1\11"+
    "\7\5\1\11\6\0\1\5\3\0\1\5\10\11\2\5"+
    "\2\11\2\5\26\11\1\5\7\11\1\5\2\11\1\5"+
    "\5\11\2\5\1\0\1\11\7\0\2\5\2\0\2\5"+
    "\3\0\7\5\3\0\4\5\2\11\1\5\3\11\2\0"+
    "\2\5\12\0\1\5\1\11\20\5\1\0\1\11\1\5"+
    "\6\11\3\5\3\11\1\5\4\11\3\5\2\11\1\5"+
    "\1\11\1\5\2\11\3\5\2\11\3\5\3\11\3\5"+
    "\14\11\4\5\5\0\3\5\3\0\1\5\4\0\2\5"+
    "\1\11\6\5\1\0\16\5\12\0\11\5\1\11\6\5"+
    "\5\0\10\11\1\5\3\11\1\5\27\11\1\5\20\11"+
    "\3\5\1\11\7\0\1\5\3\0\1\5\4\0\7\5"+
    "\2\0\1\5\3\11\5\5\2\11\2\0\2\5\12\0"+
    "\20\5\1\11\3\0\1\5\10\11\1\5\3\11\1\5"+
    "\27\11\1\5\12\11\1\5\5\11\2\5\1\0\1\11"+
    "\7\0\1\5\3\0\1\5\4\0\7\5\2\0\7\5"+
    "\1\11\1\5\2\11\2\0\2\5\12\0\1\5\2\11"+
    "\15\5\4\0\11\11\1\5\3\11\1\5\51\11\2\0"+
    "\1\11\7\0\1\5\3\0\1\5\4\0\1\11\5\5"+
    "\3\11\1\0\7\5\3\11\2\0\2\5\12\0\12\5"+
    "\6\11\1\5\3\0\1\5\22\11\3\5\30\11\1\5"+
    "\11\11\1\5\1\11\2\5\7\11\3\5\1\0\4\5"+
    "\6\0\1\5\1\0\1\5\10\0\6\5\12\0\2\5"+
    "\2\0\15\5\60\11\1\0\2\11\7\0\4\5\10\11"+
    "\10\0\1\5\12\0\47\5\2\11\1\5\1\11\1\5"+
    "\5\11\1\5\30\11\1\5\1\11\1\5\12\11\1\0"+
    "\2\11\11\0\1\11\2\5\5\11\1\5\1\11\1\5"+
    "\6\0\2\5\12\0\2\5\4\11\40\5\1\11\27\5"+
    "\2\0\6\5\12\0\13\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\2\0\10\11\1\5\44\11\4\5\24\0"+
    "\1\5\2\0\5\11\13\0\1\5\44\0\11\5\1\0"+
    "\71\5\53\11\24\0\1\11\12\0\6\5\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0"+
    "\15\11\14\0\1\11\17\0\2\5\46\11\1\5\1\11"+
    "\5\5\1\11\2\5\53\11\1\5\115\11\1\5\4\11"+
    "\2\5\7\11\1\5\1\11\1\5\4\11\2\5\51\11"+
    "\1\5\4\11\2\5\41\11\1\5\4\11\2\5\7\11"+
    "\1\5\1\11\1\5\4\11\2\5\17\11\1\5\71\11"+
    "\1\5\4\11\2\5\103\11\2\5\3\0\40\5\20\11"+
    "\20\5\126\11\2\5\6\11\3\5\u016c\11\2\5\21\11"+
    "\1\56\32\11\5\5\113\11\3\5\13\11\7\5\15\11"+
    "\1\5\4\11\3\0\13\5\22\11\3\0\13\5\22\11"+
    "\2\0\14\5\15\11\1\5\3\11\1\5\2\0\14\5"+
    "\64\11\40\0\3\5\1\11\3\5\2\11\1\0\2\5"+
    "\12\0\41\5\4\0\1\5\12\0\6\5\131\11\7\5"+
    "\5\11\2\0\42\11\1\0\1\11\5\5\106\11\12\5"+
    "\37\11\1\5\14\0\4\5\14\0\12\5\12\0\36\11"+
    "\2\5\5\11\13\5\54\11\4\5\32\11\6\5\12\0"+
    "\46\5\27\11\5\0\4\5\65\11\12\0\1\5\35\0"+
    "\2\5\13\0\6\5\12\0\15\5\1\11\10\5\16\0"+
    "\1\5\2\0\77\5\5\0\57\11\21\0\7\11\4\5"+
    "\12\0\21\5\11\0\14\5\3\0\36\11\15\0\2\11"+
    "\12\0\54\11\16\0\14\5\44\11\24\0\10\5\12\0"+
    "\3\5\3\11\12\0\44\11\2\5\11\11\7\5\53\11"+
    "\2\5\3\11\20\5\3\0\1\5\25\0\4\11\1\0"+
    "\6\11\1\0\2\11\3\0\1\11\5\5\300\11\72\0"+
    "\1\5\5\0\26\11\2\5\6\11\2\5\46\11\2\5"+
    "\6\11\2\5\10\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\37\11\2\5\65\11\1\5\7\11\1\5"+
    "\1\11\3\5\3\11\1\5\7\11\3\5\4\11\2\5"+
    "\6\11\4\5\15\11\5\5\3\11\1\5\7\11\3\5"+
    "\13\56\5\0\30\5\2\3\5\0\1\56\17\5\2\11"+
    "\23\5\1\11\12\5\1\56\5\0\1\5\12\0\1\5"+
    "\1\11\15\5\1\11\20\5\15\11\3\5\40\11\20\5"+
    "\15\0\4\5\1\0\3\5\14\0\21\5\1\11\4\5"+
    "\1\11\2\5\12\11\1\5\1\11\3\5\5\11\6\5"+
    "\1\11\1\5\1\11\1\5\1\11\1\5\4\11\1\5"+
    "\13\11\2\5\4\11\5\5\5\11\4\5\1\11\21\5"+
    "\51\11\u0177\5\57\11\1\5\57\11\1\5\205\11\6\5"+
    "\4\11\3\0\2\11\14\5\46\11\1\5\1\11\5\5"+
    "\1\11\2\5\70\11\7\5\1\11\17\5\1\0\27\11"+
    "\11\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\7\11\1\5\7\11\1\5\7\11\1\5\7\11"+
    "\1\5\40\0\57\5\1\11\320\5\1\56\4\5\3\11"+
    "\31\5\11\11\6\0\1\5\5\11\2\5\5\11\4\5"+
    "\126\11\2\5\2\0\2\5\3\11\1\5\132\11\1\5"+
    "\4\11\5\5\53\11\1\5\136\11\21\5\40\11\60\5"+
    "\320\11\100\5\375\11\3\5\215\11\103\5\56\11\2\5"+
    "\15\11\3\5\20\11\12\0\2\11\24\5\57\11\1\0"+
    "\4\5\12\0\1\5\37\11\2\0\120\11\2\0\45\5"+
    "\11\11\2\5\147\11\2\5\65\11\2\5\11\11\52\5"+
    "\15\11\1\0\3\11\1\0\4\11\1\0\27\11\5\0"+
    "\4\5\1\0\13\5\1\11\7\5\64\11\14\5\2\0"+
    "\62\11\22\0\12\5\12\0\6\5\22\0\6\11\3\5"+
    "\1\11\1\5\2\11\13\0\34\11\10\0\2\5\27\11"+
    "\15\0\14\5\35\11\3\5\4\0\57\11\16\0\16\5"+
    "\1\11\12\0\6\5\5\11\1\0\12\11\12\0\5\11"+
    "\1\5\51\11\16\0\11\5\3\11\1\0\10\11\2\0"+
    "\2\5\12\0\6\5\27\11\3\5\1\11\3\0\62\11"+
    "\1\0\1\11\3\0\2\11\2\0\5\11\2\0\1\11"+
    "\1\0\1\11\30\5\3\11\2\5\13\11\5\0\2\5"+
    "\3\11\2\0\12\5\6\11\2\5\6\11\2\5\6\11"+
    "\11\5\7\11\1\5\7\11\1\5\53\11\1\5\16\11"+
    "\6\5\163\11\10\0\1\5\2\0\2\5\12\0\6\5"+
    "\244\11\14\5\27\11\4\5\61\11\4\5\u0100\57\156\11"+
    "\2\5\152\11\46\5\7\11\14\5\5\11\5\5\1\11"+
    "\1\0\12\11\1\5\15\11\1\5\5\11\1\5\1\11"+
    "\1\5\2\11\1\5\2\11\1\5\154\11\41\5\153\11"+
    "\22\5\100\11\2\5\66\11\50\5\15\11\3\5\20\0"+
    "\20\5\20\0\3\5\2\11\30\5\3\11\31\5\1\11"+
    "\6\5\5\11\1\5\207\11\2\5\1\0\4\5\1\11"+
    "\13\5\12\0\7\5\32\11\4\5\1\11\1\5\32\11"+
    "\13\5\131\11\3\5\6\11\2\5\6\11\2\5\6\11"+
    "\2\5\3\11\3\5\2\11\3\5\2\11\22\5\3\0"+
    "\4\5\14\11\1\5\32\11\1\5\23\11\1\5\2\11"+
    "\1\5\17\11\2\5\16\11\42\5\173\11\105\5\65\11"+
    "\210\5\1\0\202\5\35\11\3\5\61\11\17\5\1\0"+
    "\37\5\40\11\15\5\36\11\5\5\46\11\5\0\5\5"+
    "\36\11\2\5\44\11\4\5\10\11\1\5\5\11\52\5"+
    "\236\11\2\5\12\0\6\5\44\11\4\5\44\11\4\5"+
    "\50\11\10\5\64\11\234\5\67\11\11\5\26\11\12\5"+
    "\10\11\230\5\6\11\2\5\1\11\1\5\54\11\1\5"+
    "\2\11\3\5\1\11\2\5\27\11\12\5\27\11\11\5"+
    "\37\11\101\5\23\11\1\5\2\11\12\5\26\11\12\5"+
    "\32\11\106\5\70\11\6\5\2\11\100\5\1\11\3\0"+
    "\1\5\2\0\5\5\4\0\4\11\1\5\3\11\1\5"+
    "\35\11\2\5\3\0\4\5\1\0\40\5\35\11\3\5"+
    "\35\11\43\5\10\11\1\5\34\11\2\0\31\5\66\11"+
    "\12\5\26\11\12\5\23\11\15\5\22\11\156\5\111\11"+
    "\67\5\63\11\15\5\63\11\15\5\44\11\4\0\10\5"+
    "\12\0\u0146\5\52\11\1\5\2\0\3\5\2\11\116\5"+
    "\35\11\12\5\1\11\10\5\26\11\13\0\137\5\25\11"+
    "\33\5\27\11\11\5\3\0\65\11\17\0\37\5\12\0"+
    "\17\5\4\0\55\11\13\0\2\5\1\0\17\5\1\0"+
    "\2\5\31\11\7\5\12\0\6\5\3\0\44\11\16\0"+
    "\1\5\12\0\4\5\1\11\2\0\1\11\10\5\43\11"+
    "\1\0\2\5\1\11\11\5\3\0\60\11\16\0\4\11"+
    "\4\5\4\0\1\5\14\0\1\11\1\5\1\11\43\5"+
    "\22\11\1\5\31\11\14\0\6\5\1\0\101\5\7\11"+
    "\1\5\1\11\1\5\4\11\1\5\17\11\1\5\12\11"+
    "\7\5\57\11\14\0\5\5\12\0\6\5\4\0\1\5"+
    "\10\11\2\5\2\11\2\5\26\11\1\5\7\11\1\5"+
    "\2\11\1\5\5\11\1\5\2\0\1\11\7\0\2\5"+
    "\2\0\2\5\3\0\2\5\1\11\6\5\1\0\5\5"+
    "\5\11\2\0\2\5\7\0\3\5\5\0\213\5\65\11"+
    "\22\0\4\11\5\5\12\0\4\5\1\0\3\11\36\5"+
    "\60\11\24\0\2\11\1\5\1\11\10\5\12\0\246\5"+
    "\57\11\7\0\2\5\11\0\27\5\4\11\2\0\42\5"+
    "\60\11\21\0\3\5\1\11\13\5\12\0\46\5\53\11"+
    "\15\0\1\11\7\5\12\0\66\5\33\11\2\5\17\0"+
    "\4\5\12\0\306\5\54\11\17\0\145\5\100\11\12\0"+
    "\25\5\10\11\2\5\1\11\2\5\10\11\1\5\2\11"+
    "\1\5\30\11\6\0\1\5\2\0\2\5\4\0\1\11"+
    "\1\0\1\11\2\0\14\5\12\0\106\5\10\11\2\5"+
    "\47\11\7\0\2\5\7\0\1\11\1\5\1\11\1\0"+
    "\33\5\1\11\12\0\50\11\7\0\1\11\4\0\10\5"+
    "\1\0\10\5\1\11\13\0\56\11\20\0\3\5\1\11"+
    "\42\5\71\11\7\5\11\11\1\5\45\11\10\0\1\5"+
    "\10\0\1\11\17\5\12\0\30\5\36\11\2\5\26\0"+
    "\1\5\16\0\111\5\7\11\1\5\2\11\1\5\46\11"+
    "\6\0\3\5\1\0\1\5\2\0\1\5\7\0\1\11"+
    "\1\0\10\5\12\0\6\5\6\11\1\5\2\11\1\5"+
    "\40\11\5\0\1\5\2\0\1\5\5\0\1\11\7\5"+
    "\12\0\u0136\5\23\11\4\0\271\5\1\11\54\5\4\11"+
    "\37\5\232\11\146\5\157\11\21\5\304\11\274\5\57\11"+
    "\1\5\11\0\307\5\107\11\271\5\71\11\7\5\37\11"+
    "\1\5\12\0\146\5\36\11\2\5\5\0\13\5\60\11"+
    "\7\0\11\5\4\11\14\5\12\0\11\5\25\11\5\5"+
    "\23\11\260\5\100\11\200\5\113\11\4\5\1\0\1\11"+
    "\67\0\7\5\4\0\15\11\100\5\2\11\1\5\1\11"+
    "\1\0\13\5\2\0\16\5\370\11\10\5\326\11\52\5"+
    "\11\11\367\5\37\11\61\5\3\11\21\5\4\11\10\5"+
    "\u018c\11\4\5\153\11\5\5\15\11\3\5\11\11\7\5"+
    "\12\11\3\5\2\0\1\5\4\0\301\5\5\0\3\5"+
    "\26\0\2\5\7\0\36\5\4\0\224\5\3\0\273\5"+
    "\125\11\1\5\107\11\1\5\2\11\2\5\1\11\2\5"+
    "\2\11\2\5\4\11\1\5\14\11\1\5\1\11\1\5"+
    "\7\11\1\5\101\11\1\5\4\11\2\5\10\11\1\5"+
    "\7\11\1\5\34\11\1\5\4\11\1\5\5\11\1\5"+
    "\1\11\3\5\7\11\1\5\u0154\11\2\5\31\11\1\5"+
    "\31\11\1\5\37\11\1\5\31\11\1\5\37\11\1\5"+
    "\31\11\1\5\37\11\1\5\31\11\1\5\37\11\1\5"+
    "\31\11\1\5\10\11\2\5\151\0\4\5\62\0\10\5"+
    "\1\0\16\5\1\0\26\5\5\0\1\5\17\0\120\5"+
    "\7\0\1\5\21\0\2\5\7\0\1\5\2\0\1\5"+
    "\5\0\325\5\55\11\3\5\7\0\7\11\2\5\12\0"+
    "\4\5\1\11\u0171\5\54\11\16\0\5\5\306\11\13\5"+
    "\7\0\51\5\104\11\7\0\1\11\4\5\12\0\u0156\5"+
    "\1\11\117\5\4\11\1\5\33\11\1\5\2\11\1\5"+
    "\1\11\2\5\1\11\1\5\12\11\1\5\4\11\1\5"+
    "\1\11\1\5\1\11\6\5\1\11\4\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\3\11\1\5\2\11\1\5"+
    "\1\11\2\5\1\11\1\5\1\11\1\5\1\11\1\5"+
    "\1\11\1\5\1\11\1\5\2\11\1\5\1\11\2\5"+
    "\4\11\1\5\7\11\1\5\4\11\1\5\4\11\1\5"+
    "\1\11\1\5\12\11\1\5\21\11\5\5\3\11\1\5"+
    "\5\11\1\5\21\11\u0134\5\12\0\6\5\336\11\42\5"+
    "\65\11\13\5\336\11\2\5\u0182\11\16\5\u0131\11\37\5"+
    "\36\11\342\5\113\11\266\5\1\0\36\5\140\0\200\5"+
    "\360\0\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[31232];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\14\0\1\2\1\3\1\4\1\5\1\4"+
    "\1\2\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\15\16\1\1\1\3\1\17\1\5\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\5\2\20"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\17"+
    "\1\36\1\37\1\40\2\41\1\42\17\16\2\0\1\43"+
    "\2\20\2\17\1\41\2\0\14\16\1\44\3\16\1\17"+
    "\1\20\1\45\1\20\3\17\16\16\1\46\1\16\1\20"+
    "\3\17\1\47\1\50\1\51\4\16\1\52\7\16\1\20"+
    "\3\17\2\16\1\53\4\16\1\54\1\55\1\16\1\56"+
    "\1\57\2\17\1\60\1\61\2\16\1\62\1\63\2\16"+
    "\1\64\1\17\1\65\1\66\1\16\1\67\1\17\1\70"+
    "\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0330\0\u0330\0\u0390\0\u03c0\0\u0330"+
    "\0\u0330\0\u03f0\0\u0330\0\u0420\0\u0330\0\u0330\0\u0450\0\u0330"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u0330\0\u0330\0\u0330\0\u07e0\0\u0330\0\u0330"+
    "\0\u0330\0\u0810\0\u0840\0\u0870\0\u0330\0\u0330\0\u0330\0\u08a0"+
    "\0\u0330\0\u0330\0\u0330\0\u08d0\0\u0330\0\u0330\0\u0330\0\u0900"+
    "\0\u0930\0\u03c0\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0330\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20"+
    "\0\u0330\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70"+
    "\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0480"+
    "\0\u0ff0\0\u1020\0\u1050\0\u0330\0\u0330\0\u07b0\0\u1080\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u0480\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u0480\0\u0480"+
    "\0\u0480\0\u14d0\0\u1500\0\u1530\0\u1560\0\u0480\0\u1590\0\u15c0"+
    "\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0\0\u1710\0\u1740"+
    "\0\u1770\0\u17a0\0\u17d0\0\u0480\0\u1800\0\u1830\0\u1860\0\u1890"+
    "\0\u0480\0\u0480\0\u18c0\0\u0480\0\u07b0\0\u18f0\0\u1920\0\u0750"+
    "\0\u0480\0\u1950\0\u1980\0\u0480\0\u0480\0\u19b0\0\u19e0\0\u0750"+
    "\0\u1a10\0\u0480\0\u0480\0\u1a40\0\u0480\0\u1a70\0\u0480\0\u0750";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\22\1\23\1\24\1\25\1\26\1\22\1\23\7\22"+
    "\1\27\4\22\1\30\31\22\1\25\1\22\2\25\1\23"+
    "\1\31\1\25\1\32\1\25\1\23\1\25\1\33\1\34"+
    "\11\25\1\35\3\25\23\34\7\25\1\23\1\31\1\25"+
    "\1\32\1\25\1\23\1\36\1\25\1\37\1\40\14\25"+
    "\23\37\7\25\1\23\1\31\1\25\1\32\1\25\1\23"+
    "\2\25\1\41\15\25\1\42\1\41\1\43\2\41\1\44"+
    "\1\45\1\41\1\46\1\47\1\41\1\50\1\51\1\52"+
    "\1\53\1\54\1\41\1\55\1\41\6\25\1\56\1\23"+
    "\1\31\1\56\1\32\1\56\1\57\51\56\1\25\1\23"+
    "\1\31\1\25\1\32\1\25\1\23\2\25\1\60\5\25"+
    "\1\61\7\25\23\60\7\25\1\23\1\31\1\25\1\32"+
    "\1\25\1\23\1\36\1\25\1\62\1\40\1\63\1\64"+
    "\1\65\1\25\1\66\1\67\1\70\1\71\1\35\1\72"+
    "\2\25\5\62\1\73\13\62\1\74\1\62\1\75\1\76"+
    "\1\77\4\25\1\23\1\31\1\25\1\32\1\25\1\23"+
    "\2\25\1\100\15\25\23\100\6\25\1\101\1\23\1\31"+
    "\1\101\1\32\1\101\1\23\12\101\1\102\36\101\1\22"+
    "\1\23\1\31\1\22\1\32\1\22\1\23\11\22\1\103"+
    "\37\22\1\25\1\23\1\31\1\25\1\32\1\25\1\23"+
    "\2\25\1\60\15\25\14\60\1\104\6\60\7\25\1\23"+
    "\1\31\1\25\1\32\1\25\1\23\2\25\1\60\15\25"+
    "\23\60\6\25\1\105\1\23\1\31\1\105\1\32\1\105"+
    "\1\23\2\105\1\34\3\105\1\106\2\105\1\107\6\105"+
    "\23\34\7\105\1\23\1\31\1\105\1\32\1\105\1\23"+
    "\2\105\1\60\15\105\23\60\7\105\1\23\1\31\1\105"+
    "\1\32\1\105\1\23\2\105\1\34\3\105\1\106\11\105"+
    "\23\34\6\105\7\25\1\110\62\25\1\111\45\25\61\0"+
    "\1\23\4\0\1\23\53\0\1\24\73\0\1\112\43\0"+
    "\1\31\55\0\1\34\10\0\1\34\5\0\1\34\7\0"+
    "\23\34\3\0\1\34\2\0\1\37\10\0\1\37\5\0"+
    "\1\37\7\0\23\37\3\0\1\37\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\23\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\10\41\1\113"+
    "\12\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\10\41\1\114\12\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\7\41\1\115"+
    "\13\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\4\41\1\116\16\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\1\117\22\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\13\41\1\120\7\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\21\41\1\121\1\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\1\122\14\41\1\123\2\41\1\124\2\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\4\41\1\125\16\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\4\41\1\126\13\41\1\127"+
    "\2\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\22\41\1\130\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\1\131\22\41\3\0"+
    "\1\41\2\0\1\56\2\0\1\56\1\0\54\56\1\23"+
    "\1\0\1\56\1\0\1\56\1\57\51\56\1\60\10\0"+
    "\1\60\5\0\1\60\7\0\23\60\3\0\1\60\21\0"+
    "\1\132\40\0\1\62\10\0\1\62\5\0\1\62\7\0"+
    "\23\62\3\0\1\62\21\0\1\133\66\0\1\134\31\0"+
    "\1\62\10\0\1\62\5\0\1\62\7\0\20\62\1\135"+
    "\2\62\3\0\1\62\2\0\1\62\10\0\1\62\5\0"+
    "\1\62\7\0\1\136\22\62\3\0\1\62\2\0\1\100"+
    "\10\0\1\100\5\0\1\100\7\0\23\100\3\0\1\100"+
    "\2\0\1\60\10\0\1\60\5\0\1\60\7\0\15\60"+
    "\1\137\2\60\1\140\2\60\3\0\1\60\2\0\7\110"+
    "\1\141\15\110\1\142\32\110\12\111\1\141\12\111\1\143"+
    "\32\111\1\41\10\0\1\41\5\0\1\41\7\0\7\41"+
    "\1\144\13\41\3\0\1\41\2\0\1\41\10\0\1\41"+
    "\5\0\1\41\7\0\1\145\22\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\4\41\1\146"+
    "\16\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\12\41\1\147\10\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\12\41\1\150"+
    "\10\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\3\41\1\151\17\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\4\41\1\152"+
    "\16\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\15\41\1\153\5\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\7\41\1\154"+
    "\3\41\1\155\7\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\1\41\1\156\21\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\17\41\1\157\3\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\4\41\1\160\16\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\14\41\1\161\6\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\14\41\1\162\6\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\15\41\1\163\5\41\3\0\1\41\21\0\1\164\57\0"+
    "\1\165\40\0\1\62\10\0\1\62\5\0\1\62\7\0"+
    "\12\62\1\166\10\62\3\0\1\62\2\0\1\62\10\0"+
    "\1\62\5\0\1\62\7\0\15\62\1\167\5\62\3\0"+
    "\1\62\2\0\1\60\10\0\1\60\5\0\1\60\7\0"+
    "\7\60\1\170\3\60\1\171\7\60\3\0\1\60\2\0"+
    "\1\60\10\0\1\60\5\0\1\60\7\0\1\60\1\172"+
    "\21\60\3\0\1\60\2\0\1\110\1\0\1\110\1\0"+
    "\2\110\1\0\46\110\2\0\1\110\1\111\1\0\1\111"+
    "\1\0\2\111\1\0\46\111\2\0\1\111\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\1\173\22\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\16\41"+
    "\1\174\4\41\3\0\1\41\2\0\1\41\10\0\1\41"+
    "\5\0\1\41\7\0\10\41\1\175\12\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\4\41"+
    "\1\176\16\41\3\0\1\41\2\0\1\41\10\0\1\41"+
    "\5\0\1\41\7\0\6\41\1\177\14\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\20\41"+
    "\1\200\2\41\3\0\1\41\2\0\1\41\10\0\1\41"+
    "\5\0\1\41\7\0\15\41\1\201\5\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\1\202"+
    "\16\41\1\203\3\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\21\41\1\204\1\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\17\41\1\205\3\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\10\41\1\206\12\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\20\41\1\207\2\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\14\41\1\210\6\41\3\0"+
    "\1\41\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\4\41\1\211\16\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\1\212\22\41\3\0\1\41"+
    "\2\0\1\62\10\0\1\62\5\0\1\62\7\0\1\213"+
    "\22\62\3\0\1\62\2\0\1\60\10\0\1\60\5\0"+
    "\1\60\7\0\21\60\1\214\1\60\3\0\1\60\2\0"+
    "\1\60\10\0\1\60\5\0\1\60\7\0\17\60\1\215"+
    "\3\60\3\0\1\60\2\0\1\60\10\0\1\60\5\0"+
    "\1\60\7\0\10\60\1\216\12\60\3\0\1\60\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\16\41\1\217"+
    "\4\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\16\41\1\220\4\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\3\41\1\221"+
    "\17\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\15\41\1\222\5\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\20\41\1\223"+
    "\2\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\10\41\1\224\12\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\10\41\1\225"+
    "\12\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\11\41\1\226\11\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\7\41\1\227"+
    "\13\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\1\230\22\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\4\41\1\231\16\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\7\41\1\232\13\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\15\41\1\233\5\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\15\41\1\234\5\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\15\41\1\235\5\41"+
    "\3\0\1\41\2\0\1\62\10\0\1\62\5\0\1\62"+
    "\7\0\15\62\1\236\5\62\3\0\1\62\2\0\1\60"+
    "\10\0\1\60\5\0\1\60\7\0\1\237\22\60\3\0"+
    "\1\60\2\0\1\60\10\0\1\60\5\0\1\60\7\0"+
    "\4\60\1\240\16\60\3\0\1\60\2\0\1\60\10\0"+
    "\1\60\5\0\1\60\7\0\7\60\1\241\13\60\3\0"+
    "\1\60\2\0\1\41\10\0\1\41\5\0\1\41\7\0"+
    "\7\41\1\242\13\41\3\0\1\41\2\0\1\41\10\0"+
    "\1\41\5\0\1\41\7\0\1\243\22\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\4\41"+
    "\1\244\16\41\3\0\1\41\2\0\1\41\10\0\1\41"+
    "\5\0\1\41\7\0\13\41\1\245\7\41\3\0\1\41"+
    "\2\0\1\41\10\0\1\41\5\0\1\41\7\0\1\246"+
    "\22\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\17\41\1\247\3\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\2\41\1\250"+
    "\20\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\2\41\1\251\20\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\12\41\1\252"+
    "\10\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\4\41\1\253\16\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\6\41\1\254"+
    "\14\41\3\0\1\41\2\0\1\62\10\0\1\62\5\0"+
    "\1\62\7\0\6\62\1\255\14\62\3\0\1\62\2\0"+
    "\1\60\10\0\1\60\5\0\1\60\7\0\17\60\1\256"+
    "\3\60\3\0\1\60\2\0\1\60\10\0\1\60\5\0"+
    "\1\60\7\0\2\60\1\257\20\60\3\0\1\60\2\0"+
    "\1\60\10\0\1\60\5\0\1\60\7\0\2\60\1\260"+
    "\20\60\3\0\1\60\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\2\41\1\261\20\41\3\0\1\41\2\0"+
    "\1\41\10\0\1\41\5\0\1\41\7\0\6\41\1\262"+
    "\14\41\3\0\1\41\2\0\1\41\10\0\1\41\5\0"+
    "\1\41\7\0\1\263\22\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\10\41\1\264\12\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\4\41\1\265\16\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\17\41\1\266\3\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\16\41\1\267\4\41\3\0\1\41\2\0\1\60"+
    "\10\0\1\60\5\0\1\60\7\0\4\60\1\270\16\60"+
    "\3\0\1\60\2\0\1\60\10\0\1\60\5\0\1\60"+
    "\7\0\17\60\1\271\3\60\3\0\1\60\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\4\41\1\272\16\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\3\41\1\273\17\41\3\0\1\41\2\0\1\41"+
    "\10\0\1\41\5\0\1\41\7\0\4\41\1\274\16\41"+
    "\3\0\1\41\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\16\41\1\275\4\41\3\0\1\41\2\0\1\60"+
    "\10\0\1\60\5\0\1\60\7\0\4\60\1\276\16\60"+
    "\3\0\1\60\2\0\1\41\10\0\1\41\5\0\1\41"+
    "\7\0\3\41\1\277\17\41\3\0\1\41\2\0\1\60"+
    "\10\0\1\60\5\0\1\60\7\0\3\60\1\300\17\60"+
    "\3\0\1\60\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6816];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\14\0\1\11\1\1\2\11\2\1\2\11"+
    "\1\1\1\11\1\1\2\11\1\1\1\11\22\1\3\11"+
    "\1\1\3\11\3\1\3\11\1\1\3\11\1\1\3\11"+
    "\22\1\2\0\1\11\4\1\1\11\2\0\20\1\2\11"+
    "\113\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private int _typeLevel = 0;
    private boolean _typeReq = false;
    private boolean classAppendGeneric = false;
    private Stack<Integer> _stack = new Stack<>();
    public _LuaDocLexer() {
        this((java.io.Reader) null);
    }

    private void pushState(int state) {
        _stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        var state = _stack.pop();
        yybegin(state);
    }

    private void beginType() {
        yybegin(xTYPE_REF);
        _typeLevel = 0;
        _typeReq = true;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuaDocLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yybegin(YYINITIAL); return STRING;
            }
          // fall through
          case 58: break;
          case 2:
            { yybegin(xCOMMENT_STRING); yypushback(yylength());
            }
          // fall through
          case 59: break;
          case 3:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 60: break;
          case 4:
            { yybegin(YYINITIAL); return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 61: break;
          case 5:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 62: break;
          case 6:
            { yybegin(xTAG_NAME); return AT;
            }
          // fall through
          case 63: break;
          case 7:
            { yybegin(YYINITIAL);return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 64: break;
          case 8:
            { return SHARP;
            }
          // fall through
          case 65: break;
          case 9:
            { return ID;
            }
          // fall through
          case 66: break;
          case 10:
            { yybegin(xCOMMENT_STRING); return STRING_BEGIN;
            }
          // fall through
          case 67: break;
          case 11:
            { pushState(xDOUBLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 68: break;
          case 12:
            { yybegin(xCOMMENT_STRING); return ID;
            }
          // fall through
          case 69: break;
          case 13:
            { pushState(xSINGLE_QUOTED_STRING); yypushback(yylength());
            }
          // fall through
          case 70: break;
          case 14:
            { yybegin(xCOMMENT_STRING); return TAG_NAME;
            }
          // fall through
          case 71: break;
          case 15:
            { beginType(); return ID;
            }
          // fall through
          case 72: break;
          case 16:
            { if (_typeReq || _typeLevel > 0) { _typeReq = false; return ID; } else { if (classAppendGeneric) { classAppendGeneric = false; yybegin(xCLASS_EXTEND); yypushback(yylength()); }else { yybegin(xCOMMENT_STRING); yypushback(yylength()); }}
            }
          // fall through
          case 73: break;
          case 17:
            { _typeLevel++; return LPAREN;
            }
          // fall through
          case 74: break;
          case 18:
            { _typeLevel--; _typeReq = false; return RPAREN;
            }
          // fall through
          case 75: break;
          case 19:
            { _typeReq = true; return COMMA;
            }
          // fall through
          case 76: break;
          case 20:
            { _typeReq = true; return EXTENDS;
            }
          // fall through
          case 77: break;
          case 21:
            { _typeLevel++; return LT;
            }
          // fall through
          case 78: break;
          case 22:
            { _typeLevel--; _typeReq = false; return GT;
            }
          // fall through
          case 79: break;
          case 23:
            { _typeLevel++; return LCURLY;
            }
          // fall through
          case 80: break;
          case 24:
            { _typeReq = true; return OR;
            }
          // fall through
          case 81: break;
          case 25:
            { _typeLevel--; _typeReq = false; return RCURLY;
            }
          // fall through
          case 82: break;
          case 26:
            { yybegin(xCLASS_GENERIC); return ID;
            }
          // fall through
          case 83: break;
          case 27:
            { yybegin(xCLASS_EXTEND); yypushback(yylength());
            }
          // fall through
          case 84: break;
          case 28:
            { yybegin(xTYPE_REF);classAppendGeneric=true;_typeLevel++;return LT;
            }
          // fall through
          case 85: break;
          case 29:
            { beginType(); return EXTENDS;
            }
          // fall through
          case 86: break;
          case 30:
            { yybegin(YYINITIAL); yypushback(yylength());
            }
          // fall through
          case 87: break;
          case 31:
            { return COMMA;
            }
          // fall through
          case 88: break;
          case 32:
            { return EXTENDS;
            }
          // fall through
          case 89: break;
          case 33:
            { popState(); return STRING_LITERAL;
            }
          // fall through
          case 90: break;
          case 34:
            { return DASHES;
            }
          // fall through
          case 91: break;
          case 35:
            { _typeReq = false; return ARR;
            }
          // fall through
          case 92: break;
          case 36:
            { yybegin(xTAG); return TAG_NAME_SEE;
            }
          // fall through
          case 93: break;
          case 37:
            { return FUN;
            }
          // fall through
          case 94: break;
          case 38:
            { beginType(); return TAG_NAME_TYPE;
            }
          // fall through
          case 95: break;
          case 39:
            { yybegin(xALIAS); return TAG_NAME_ALIAS;
            }
          // fall through
          case 96: break;
          case 40:
            { yybegin(xCLASS); return TAG_NAME_CLASS;
            }
          // fall through
          case 97: break;
          case 41:
            { yybegin(xFIELD); return TAG_NAME_FIELD;
            }
          // fall through
          case 98: break;
          case 42:
            { yybegin(xPARAM); return TAG_NAME_PARAM;
            }
          // fall through
          case 99: break;
          case 43:
            { yybegin(xCLASS); return TAG_NAME_MODULE;
            }
          // fall through
          case 100: break;
          case 44:
            { return TAG_NAME_PUBLIC;
            }
          // fall through
          case 101: break;
          case 45:
            { beginType(); return TAG_NAME_RETURN;
            }
          // fall through
          case 102: break;
          case 46:
            { yybegin(xPARAM); return TAG_NAME_VARARG;
            }
          // fall through
          case 103: break;
          case 47:
            { _typeReq = true; return VARARG;
            }
          // fall through
          case 104: break;
          case 48:
            { yybegin(xFIELD_ID); return PUBLIC;
            }
          // fall through
          case 105: break;
          case 49:
            { yybegin(xGENERIC); return TAG_NAME_GENERIC;
            }
          // fall through
          case 106: break;
          case 50:
            { yybegin(xPARTIAL); return TAG_NAME_PARTIAL;
            }
          // fall through
          case 107: break;
          case 51:
            { return TAG_NAME_PRIVATE;
            }
          // fall through
          case 108: break;
          case 52:
            { yybegin(xFIELD_ID); return PRIVATE;
            }
          // fall through
          case 109: break;
          case 53:
            { yybegin(xTAG_WITH_ID); return TAG_NAME_LANGUAGE;
            }
          // fall through
          case 110: break;
          case 54:
            { beginType(); return TAG_NAME_OVERLOAD;
            }
          // fall through
          case 111: break;
          case 55:
            { yybegin(xSUPPRESS); return TAG_NAME_SUPPRESS;
            }
          // fall through
          case 112: break;
          case 56:
            { return TAG_NAME_PROTECTED;
            }
          // fall through
          case 113: break;
          case 57:
            { yybegin(xFIELD_ID); return PROTECTED;
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
